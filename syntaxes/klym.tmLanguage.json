{
    "scopeName": "source.klym",
    "patterns": [
        {
            "name": "comment.block.klym",
            "begin": "/\\*",
            "end": "\\*/"
        },
        {
            "name": "comment.line.klym",
            "match": "//.*$"
        },
        {
            "name": "string.quoted.double.klym",
            "match": "\"(\\\\\\\\|\\\\\"|.)*?\""
        },
        {
            "name": "constant.numeric.klym",
            "match": "\\b([0-9]*\\.[0-9]+|[0-9]+)(i|l|f|d)?\\b"
        },
        {
            "name": "punctuation.klym",
            "match": "[,.:;{}]"
        },
        {
            "name": "keyword.control.klym",
            "match": "\\b(if|else|for|while|return|switch|case)\\b"
        },
        {
            "begin": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=:)",
            "beginCaptures": {
                "0": { "name": "entity.name.type.klym" },
                "1": { "name": "variable.enum.klym" }
            },
            "end": "\\b"
        },
        {
            "name": "keyword.operator.klym",
            "match": "[+\\-*/&|~^]"
        },
        {
            "name": "constant.language.boolean.klym",
            "match": "\\b(false|true)\\b"
        },
        {
            "name": "constant.language.null.klym",
            "match": "\\b(null|blank)\\b"
        },
        {
            "name": "storage.modifier.klym",
            "match": "\\b(private|prefix|postfix)\\b"
        },
        {
            "begin": "\\bnew\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()",
            "beginCaptures": {
                "0": { "name": "keyword.other.klym" },
                "1": { "name": "entity.name.type.klym" }
            },
            "end": "\\b"
        },
        {
            "begin": "\\bclass\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "beginCaptures": {
                "0": { "name": "keyword.other.klym" },
                "1": { "name": "entity.name.type.klym" }
            },
            "end": "\\b"
        },
        {
            "begin": "\\benum\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "beginCaptures": {
                "0": { "name": "keyword.other.klym" },
                "1": { "name": "entity.name.type.klym" }
            },
            "end": "\\b"
        },
        {
            "name": "variable.enum.klym",
            "begin": "\\benum\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b{",
            "end": "}"
        },
        {
            "name": "keyword.other.klym",
            "match": "\\b(new|class|enum)\\b"
        },
        {
            "begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()",
            "beginCaptures": {
                "1": { "name": "entity.name.type.klym" },
                "2": { "name": "entity.name.function.klym" }
            },
            "end": "\\b"
        },
        {
            "name": "entity.name.function.klym",
            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\()"
        },
        {
            "begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "beginCaptures": {
                "1": { "name": "entity.name.type.klym" },
                "2": { "name": "variable.klym" }
            },
            "end": "\\b"
        },
        {
            "name": "variable.other.property.klym",
            "match": "(?<=\\.)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
            "name": "variable.klym",
            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
    ],
    "repository": {}
}
